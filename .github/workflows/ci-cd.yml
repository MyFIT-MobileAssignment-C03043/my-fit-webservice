# .github/workflows/ci-cd.yml

name: NestJS CI/CD Pipeline

# Trigger workflow khi có push hoặc pull request vào nhánh main
on:
  push:
    branches: [ main ] 
  pull_request:
    branches: [ main ] 

jobs:
  # ---- Continuous Integration (CI) Job ----
  build:
    name: Build
    runs-on: ubuntu-latest # Sử dụng Ubuntu làm môi trường chạy

    strategy:
      matrix:
        node-version: [ 20.x ] 

    steps:
    # Bước 1: Checkout code từ repository
    - name: Checkout Code
      uses: actions/checkout@v4 # Sử dụng action checkout chính thức

    # Bước 2: Thiết lập môi trường Node.js
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm' # Bật caching cho npm để tăng tốc độ cài đặt dependencies

    # Bước 3: Cài đặt dependencies
    # Sử dụng 'npm ci' thay vì 'npm install' để đảm bảo cài đặt chính xác từ package-lock.json
    - name: Install Dependencies
      run: npm ci

    # Bước 4: Build ứng dụng
    # Dựa trên script 'build' trong package.json
    - name: Build Application
      run: npm run build

  # ---- Continuous Deployment (CD) Job ----
  deploy:
    name: Deploy and Release
    needs: build # Job này chỉ chạy sau khi job 'build' thành công
    runs-on: ubuntu-latest
    # Chỉ chạy job deploy khi có push vào nhánh main (không chạy cho pull request)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: write

    steps:
      # Bước 1: Checkout code 
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          # Cần fetch toàn bộ history để npm version hoạt động đúng với tag
          fetch-depth: 0
          # Cần GITHUB_TOKEN để push lại repo
          token: ${{ secrets.GITHUB_TOKEN }}

      # Bước 2: Thiết lập Node.js (Cần để chạy npm)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x' 

      # Bước 3: Trigger OnRender Deploy Hook
      - name: Trigger OnRender Deploy Hook
        run: curl -X POST ${{ secrets.ONRENDER_DEPLOY_HOOK_URL }}

      # --- CÁC BƯỚC ĐỂ BUMP VERSION VÀ TẠO RELEASE ---

      # Bước 4: Cấu hình Git User
      - name: Configure Git User
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor}}@users.noreply.github.com"

      # Bước 5: Bump phiên bản patch, tạo commit và tag
      #    - 'npm version patch' sẽ tăng số cuối cùng (0.0.1 -> 0.0.2)
      #    - '-m "..."': Commit message. %s sẽ được thay bằng version mới.
      #    - '[skip ci]': Thêm vào commit message để ngăn workflow này chạy lại lần nữa do chính commit này tạo ra.
      - name: Bump version and create tag
        run: |
          npm version patch -m "chore(release): bump version to %s [skip ci]"
          echo "NEW_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      # Bước 6: Push commit và tag mới lên GitHub
      - name: Push changes and tag
        run: |
          git push origin main --follow-tags

      # Bước 7: Tạo GitHub Release
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Token mặc định của workflow
        with:
          tag_name: v${{ env.NEW_VERSION }} # Lấy version từ package.json (vd: v0.0.2)
          release_name: Release v${{ env.NEW_VERSION }}
          body: |
            Release tự động từ CI/CD pipeline.
            Xem thay đổi tại: ${{ github.server_url }}/${{ github.repository }}/compare/${{ github.sha }}...v${{ env.NEW_VERSION }}
          draft: false
          prerelease: false